

include(FindPackageHandleStandardArgs)

message(STATUS "Conan: Using autogenerated Findtrilinos.cmake")
# Global approach
set(trilinos_FOUND 1)
set(trilinos_VERSION "12.18.1")

find_package_handle_standard_args(trilinos REQUIRED_VARS trilinos_VERSION VERSION_VAR trilinos_VERSION)
mark_as_advanced(trilinos_FOUND trilinos_VERSION)



set(trilinos_INCLUDE_DIRS "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/include")
set(trilinos_INCLUDE_DIR "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/include")
set(trilinos_INCLUDES "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/include")
set(trilinos_RES_DIRS )
set(trilinos_DEFINITIONS )
set(trilinos_LINKER_FLAGS_LIST "" "")
set(trilinos_COMPILE_DEFINITIONS )
set(trilinos_COMPILE_OPTIONS_LIST "" "")
set(trilinos_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(trilinos_LIBRARIES "") # Will be filled later
set(trilinos_LIBS "") # Same as trilinos_LIBRARIES
set(trilinos_SYSTEM_LIBS )
set(trilinos_FRAMEWORK_DIRS )
set(trilinos_FRAMEWORKS )
set(trilinos_FRAMEWORKS_FOUND "") # Will be filled later
set(trilinos_BUILD_MODULES_PATHS )

# Apple frameworks
if(APPLE)
    foreach(_FRAMEWORK ${trilinos_FRAMEWORKS})
        # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
        find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${trilinos_FRAMEWORK_DIRS})
        if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
            list(APPEND trilinos_FRAMEWORKS_FOUND ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
        else()
            message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${trilinos_FRAMEWORK_DIRS}")
        endif()
    endforeach()
endif()

mark_as_advanced(trilinos_INCLUDE_DIRS
                 trilinos_INCLUDE_DIR
                 trilinos_INCLUDES
                 trilinos_DEFINITIONS
                 trilinos_LINKER_FLAGS_LIST
                 trilinos_COMPILE_DEFINITIONS
                 trilinos_COMPILE_OPTIONS_LIST
                 trilinos_LIBRARIES
                 trilinos_LIBS
                 trilinos_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to trilinos_LIBS and trilinos_LIBRARY_LIST
set(trilinos_LIBRARY_LIST amesos amesos2 aztecoo belos belosepetra belostpetra belosxpetra epetra epetraext galeri-epetra galeri-xpetra gtest ifpack ifpack2 ifpack2-adapters isorropia kokkosalgorithms kokkoscontainers kokkoscore kokkoskernels kokkostsqr ml pamgen pamgen_extras rtop shylu_nodehts shylu_nodetacho teuchoscomm teuchoscore teuchoskokkoscomm teuchoskokkoscompat teuchosnumerics teuchosparameterlist teuchosparser teuchosremainder thyracore thyraepetra thyraepetraext thyratpetra tpetra tpetraclassic tpetraclassiclinalg tpetraclassicnodeapi tpetraext tpetrainout trilinosss triutils xpetra xpetra-sup zoltan zoltan2)
set(trilinos_LIB_DIRS "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/lib")
foreach(_LIBRARY_NAME ${trilinos_LIBRARY_LIST})
    unset(CONAN_FOUND_LIBRARY CACHE)
    find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${trilinos_LIB_DIRS}
                 NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(CONAN_FOUND_LIBRARY)
        list(APPEND trilinos_LIBRARIES ${CONAN_FOUND_LIBRARY})
        if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
            # Create a micro-target for each lib/a found
            set(_LIB_NAME CONAN_LIB::trilinos_${_LIBRARY_NAME})
            if(NOT TARGET ${_LIB_NAME})
                # Create a micro-target for each lib/a found
                add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
            else()
                message(STATUS "Skipping already existing target: ${_LIB_NAME}")
            endif()
            list(APPEND trilinos_LIBRARIES_TARGETS ${_LIB_NAME})
        endif()
        message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
    else()
        message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
        list(APPEND trilinos_LIBRARIES_TARGETS ${_LIBRARY_NAME})
        list(APPEND trilinos_LIBRARIES ${_LIBRARY_NAME})
    endif()
endforeach()
set(trilinos_LIBS ${trilinos_LIBRARIES})

foreach(_FRAMEWORK ${trilinos_FRAMEWORKS_FOUND})
    list(APPEND trilinos_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND trilinos_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${trilinos_SYSTEM_LIB})
    list(APPEND trilinos_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND trilinos_LIBRARIES ${_SYSTEM_LIB})
endforeach()

set(CMAKE_MODULE_PATH "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/kgreen/.conan/data/trilinos/12.18.1/CHM/dev/package/6e5b2de9988fa3c136db9e9ce30e299465eb31d2/" ${CMAKE_PREFIX_PATH})

foreach(_BUILD_MODULE_PATH ${trilinos_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET trilinos::trilinos)
        add_library(trilinos::trilinos INTERFACE IMPORTED)

    if(trilinos_INCLUDE_DIRS)
      set_target_properties(trilinos::trilinos PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${trilinos_INCLUDE_DIRS}")
    endif()
    set_property(TARGET trilinos::trilinos PROPERTY INTERFACE_LINK_LIBRARIES ${trilinos_LIBRARIES_TARGETS} ${triplinos_SYSTEM_LIBS} "${trilinos_LINKER_FLAGS_LIST}")
    set_property(TARGET trilinos::trilinos PROPERTY INTERFACE_COMPILE_DEFINITIONS ${trilinos_COMPILE_DEFINITIONS})
    set_property(TARGET trilinos::trilinos PROPERTY INTERFACE_COMPILE_OPTIONS "${trilinos_COMPILE_OPTIONS_LIST}")


    # Library dependencies
    include(CMakeFindDependencyMacro)
    find_dependency(ZLIB REQUIRED)
    get_target_property(tmp ZLIB::ZLIB INTERFACE_LINK_LIBRARIES)
    if(tmp)
      set_property(TARGET trilinos::trilinos APPEND PROPERTY INTERFACE_LINK_LIBRARIES ${tmp})
    endif()
    get_target_property(tmp ZLIB::ZLIB INTERFACE_COMPILE_DEFINITIONS)
    if(tmp)
      set_property(TARGET trilinos::trilinos APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS ${tmp})
    endif()
    get_target_property(tmp ZLIB::ZLIB INTERFACE_INCLUDE_DIRECTORIES)
    if(tmp)
      set_property(TARGET trilinos::trilinos APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${tmp})
    endif()
    endif()
endif()
