cmake_minimum_required(VERSION 2.8)
project(externalLib)
include(ExternalProject)


#these should always be built and downloaded
ExternalProject_Add(
    sparsehash
    GIT_REPOSITORY https://github.com/sparsehash/sparsehash.git
    INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/sparsehash

    CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/sparsehash-prefix/src/sparsehash/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/sparsehash-prefix/src/sparsehash/configure  CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/sparsehash
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j10
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 1
    )

if(USE_TCMALLOC)
    ExternalProject_Add(
        gperftools
        GIT_REPOSITORY https://github.com/gperftools/gperftools
        INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/gperftools

        CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/gperftools-prefix/src/gperftools/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/gperftools-prefix/src/gperftools/configure CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/gperftools 	    UPDATE_COMMAND ""
        BUILD_COMMAND make -j10
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
            )
endif()

ExternalProject_Add(
    eigen3
    URL http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/eigen3 -DINCLUDE_INSTALL_DIR=${CMAKE_BINARY_DIR}/lib/eigen3
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j10
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 0
    )

#GDAL depends on this. If we are building proj4, we need to turn off the VTK proj4

if(BUILD_PROJ4)
    ExternalProject_Add(
    	proj4
        URL http://download.osgeo.org/proj/proj-4.9.3.tar.gz
        UPDATE_COMMAND ""
        CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/proj4-prefix/src/proj4/configure --prefix=${CMAKE_BINARY_DIR}/lib/proj4
        BUILD_COMMAND make -j10
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
    )

endif()

if(BUILD_VTK)
     ExternalProject_Add(
	    VTK
	    DEPENDS proj4
	    URL http://www.vtk.org/files/release/8.1/VTK-8.1.1.tar.gz
	    UPDATE_COMMAND ""
	    #PATCH_COMMAND patch -p1  < ${CMAKE_BINARY_DIR}/vtk-8.0.0.patch
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/VTK -DCMAKE_BUILD_TYPE=Release
	                -DVTK_USE_SYSTEM_libproj4=ON
	                -DLIBPROJ4_LIBRARIES=${CMAKE_BINARY_DIR}/lib/proj4/lib/libproj.so -DLIBPROJ4_INCLUDE_DIR=${CMAKE_BINARY_DIR}/lib/proj4/include
	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if( BUILD_BOOST)
    ExternalProject_Add(
	    boost
	    URL https://downloads.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.gz
	    INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/boost
	    CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/bootstrap.sh --prefix="${CMAKE_BINARY_DIR}/lib/boost"
	    UPDATE_COMMAND ""
	    BUILD_COMMAND ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/b2 -j 10
	    INSTALL_COMMAND ./b2 install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_GSL)
    ExternalProject_Add(
	    gsl
	    URL ftp://ftp.gnu.org/gnu/gsl/gsl-2.4.tar.gz
	    CONFIGURE_COMMAND ./configure --prefix=${CMAKE_BINARY_DIR}/lib/gsl
	    UPDATE_COMMAND ""
	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1)
endif()

if(BUILD_ARMADILLO)
    ExternalProject_Add(
	    armadillo
	    URL http://sourceforge.net/projects/arma/files/armadillo-7.950.1.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/armadillo
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()
if(BUILD_VIENNACL)
    ExternalProject_Add(
	    ViennaCL
	    URL https://downloads.sourceforge.net/project/viennacl/1.7.x/ViennaCL-1.7.1.tar.gz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/ViennaCL -DENABLE_CUDA=OFF -DENABLE_OPENMP=ON -DBUILD_EXAMPLES=OFF
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_CGAL)
    ExternalProject_Add(
	    CGAL
	    URL https://github.com/CGAL/cgal/releases/download/releases%2FCGAL-4.10/CGAL-4.10.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/CGAL -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_ROOT=${CMAKE_BINARY_DIR}/lib/boost -DWITH_CGAL_Qt5=OFF
	    BUILD_COMMAND make -j10 
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    #DEPENDS boost
	    )
    LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_BINARY_DIR}/lib/CGAL/lib64/CGAL")
endif()

if(BUILD_TBB)
 ExternalProject_Add(
	    tbb
	    GIT_REPOSITORY https://github.com/wjakob/tbb.git
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/tbb
	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_GDAL)

    ExternalProject_Add(
	    GDAL
	    DEPENDS proj4
	    URL http://download.osgeo.org/gdal/2.2.1/gdal-2.2.1.tar.gz
	    UPDATE_COMMAND ""
	    PATCH_COMMAND patch -p1 < ${CMAKE_BINARY_DIR}/gdal-2.2.1.patch

	    #occasionally GDAL doesn't correctly detect this, so can enable if required
	    #http://osgeo-org.1560.x6.nabble.com/gdal-dev-sprintf-different-exception-specified-td5340324.html
	    # CXXFLAGS=-DDONT_DEPRECATE_SPRINTF

	    CONFIGURE_COMMAND ${CMAKE_BINARY_DIR}/lib/GDAL-prefix/src/GDAL/configure  --prefix=${CMAKE_BINARY_DIR}/lib/gdal --with-static-proj4=${CMAKE_BINARY_DIR}/lib/proj4 --without-hdf5 --without-netcdf
	    BUILD_COMMAND make -j10  
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_NETCDF)
    #even if netcdf-c and hdf are installed, there are some API changes and incompatibilities. It is easier to just build it all from scratch.

    #build HDF5 first
    ExternalProject_Add(
	    hdf5
	    URL https://support.hdfgroup.org/ftp/HDF5/prev-releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz
	    UPDATE_COMMAND ""
        #CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/hdf5

        CONFIGURE_COMMAND bash ${CMAKE_BINARY_DIR}/lib/hdf5-prefix/src/hdf5/configure
                              --prefix=${CMAKE_BINARY_DIR}/lib/hdf5
                              --enable-cxx --enable-shared --enable-unsupported

	    BUILD_COMMAND make -j10
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )


        ExternalProject_Add(
            netcdf-c
            GIT_REPOSITORY https://github.com/Unidata/netcdf-c.git
            GIT_TAG e0dcb24  #v4.6.1
            UPDATE_COMMAND ""
            DEPENDS hdf5


            # looks like autoreconf -if  is no longer needed
            CONFIGURE_COMMAND   ${CMAKE_BINARY_DIR}/lib/netcdf-c-prefix/src/netcdf-c/configure
                      CPPFLAGS=-I${CMAKE_BINARY_DIR}/lib/hdf5/include
                      LDFLAGS=-L${CMAKE_BINARY_DIR}/lib/hdf5/lib
                      --prefix=${CMAKE_BINARY_DIR}/lib/netcdf-c
                      --enable-netcdf-4 --enable-shared

          #  CMAKE_ARGS  -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}/lib/hdf5 -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/netcdf-c
          #              -DENABLE_NETCDF_4=ON -DBUILD_SHARED_LIBS=ON

          # With 4.6.1, there appears to be a parallel make regression that causes, randomly compilation failure
          # https://github.com/Unidata/netcdf-c/issues/896#issuecomment-382823731
            BUILD_COMMAND make
            INSTALL_COMMAND make install
            BUILD_IN_SOURCE 1
        )


        ExternalProject_Add(
            netcdf-cxx
            GIT_REPOSITORY https://github.com/Unidata/netcdf-cxx4.git
            GIT_TAG 50c8b89 # v. 4.3.0
            UPDATE_COMMAND ""
            DEPENDS netcdf-c

            #install this to the netcdf directory as that's where the cmake findnetcdf script is going to look
            CMAKE_ARGS -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}/lib/netcdf-c
                        -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/netcdf-c

            BUILD_COMMAND make -j10
            INSTALL_COMMAND make install
            BUILD_IN_SOURCE 1
        )


endif()
